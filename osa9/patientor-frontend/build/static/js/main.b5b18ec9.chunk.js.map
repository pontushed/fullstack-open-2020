{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","components/EntryDetails.tsx","AddEntryModal/AddOccupationalHealthcareEntryForm.tsx","AddEntryModal/EntryTypeSelector.tsx","AddEntryModal/AddHospitalEntryForm.tsx","AddEntryModal/AddHealthCheckEntryForm.tsx","AddEntryModal/index.tsx","PatientDetailsPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","setCurrentPatient","currentPatient","type","payload","addPatient","newPatient","initialState","patients","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","id","Cell","Link","to","BaseEntryDetails","entry","Item","date","Meta","specialist","Description","marginBottom","description","DiagnosesList","diagnosisCodes","Extra","marginTop","index","allDiagnoses","find","d","findDiagnosisByCode","HospitalEntryDetails","Icon","size","discharge","criteria","OccupationalHealthcareEntryDetails","employerName","sickLeave","startDate","endDate","HealthCheckEntryDetails","defaultRating","healthCheckRating","EntryDetails","Error","JSON","stringify","assertNever","AddOccupationalHealthcareEntryForm","requiredError","Date","parse","EntryTypeSelector","entryType","setEntryType","AddHospitalEntryForm","AddHealthCheckEntryForm","AddEntryModal","PatientDetailsPage","submitNewEntry","patientId","newEntry","useParams","useEffect","fetchCurrentPatient","get","currentPatientFromApi","log","entries","length","Group","divided","App","patientListFromApi","fetchPatientList","diagnosesFromApi","fetchDiagnoses","primary","Divider","hidden","path","render","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.b5b18ec9.chunk.js","sourcesContent":["import { HealthCheckEntryFormValues } from './AddEntryModal/AddHealthCheckEntryForm';\nimport { HospitalEntryFormValues } from './AddEntryModal/AddHospitalEntryForm';\nimport { OccupationalHealthcareEntryFormValues } from './AddEntryModal/AddOccupationalHealthcareEntryForm';\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\ninterface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  Healthy = 0,\n  LowRisk = 1,\n  HighRisk = 2,\n  CriticalRisk = 3,\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\ninterface Discharge {\n  date: string;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: Discharge;\n}\n\ninterface SickLeaveDates {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave?: SickLeaveDates;\n}\n\nexport type Entry =\n  | HealthCheckEntry\n  | HospitalEntry\n  | OccupationalHealthcareEntry;\n\nexport type EntryFormValues =\n  | HospitalEntryFormValues\n  | HealthCheckEntryFormValues\n  | OccupationalHealthcareEntryFormValues;\n","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from './state';\nimport { Patient, Diagnosis, Entry } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_CURRENT_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSES';\n      payload: Diagnosis[];\n    }\n  | {\n      type: 'ADD_ENTRY';\n      payload: Entry;\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n    case 'SET_CURRENT_PATIENT':\n      return {\n        ...state,\n        currentPatient: action.payload,\n      };\n    case 'SET_DIAGNOSES':\n      return {\n        ...state,\n        diagnoses: action.payload,\n      };\n    case 'ADD_ENTRY':\n      if (state.currentPatient === null) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentPatient: {\n          ...state.currentPatient,\n          entries: [...state.currentPatient.entries, action.payload],\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setPatientList = (patientList: Patient[]): Action => {\n  return {\n    type: 'SET_PATIENT_LIST',\n    payload: patientList,\n  };\n};\n\nexport const setCurrentPatient = (currentPatient: Patient): Action => {\n  return {\n    type: 'SET_CURRENT_PATIENT',\n    payload: currentPatient,\n  };\n};\n\nexport const addPatient = (newPatient: Patient): Action => {\n  return {\n    type: 'ADD_PATIENT',\n    payload: newPatient,\n  };\n};\n\nexport const setDiagnoses = (diagnoses: Diagnosis[]): Action => {\n  return {\n    type: 'SET_DIAGNOSES',\n    payload: diagnoses,\n  };\n};\n\nexport const addEntry = (entry: Entry): Action => {\n  return {\n    type: 'ADD_ENTRY',\n    payload: entry,\n  };\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Patient, Diagnosis } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  currentPatient: Patient | null;\n  patients: { [id: string]: Patient };\n  diagnoses: Diagnosis[];\n};\n\nconst initialState: State = {\n  currentPatient: null,\n  patients: {},\n  diagnoses: [],\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { Diagnosis, Gender } from '../types';\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({\n  field,\n  label,\n  min,\n  max,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched,\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map((diagnosis) => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code,\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Table, Button } from 'semantic-ui-react';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue } from '../state';\nimport { addPatient } from '../state/reducer';\nimport { Link } from 'react-router-dom';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Container textAlign='center'>\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n            <Table.HeaderCell></Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>{patient.name}</Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n              <Table.Cell>\n                <Button as={Link} to={`/patients/${patient.id}`}>\n                  Show details\n                </Button>\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from 'react';\nimport { useStateValue } from '../state';\n\nimport {\n  Entry,\n  HospitalEntry,\n  OccupationalHealthcareEntry,\n  HealthCheckEntry,\n  Diagnosis,\n} from '../types';\nimport { Item, Rating, Icon } from 'semantic-ui-react';\n\nconst assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};\n\nconst findDiagnosisByCode = (\n  code: Diagnosis['code'],\n  allDiagnoses: Diagnosis[]\n): Diagnosis | undefined => {\n  return allDiagnoses.find((d: Diagnosis) => d.code === code);\n};\n\nconst BaseEntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n  return (\n    <>\n      <Item.Header>{entry.date}</Item.Header>\n      <Item.Meta>Specialist: {entry.specialist}</Item.Meta>\n      <Item.Description style={{ marginBottom: '1em' }}>\n        {entry.description}\n      </Item.Description>\n    </>\n  );\n};\n\nconst DiagnosesList: React.FC<{ entry: Entry }> = ({ entry }) => {\n  const [{ diagnoses }] = useStateValue();\n\n  if (!entry.diagnosisCodes) {\n    return null;\n  }\n\n  return (\n    <Item.Extra>\n      <h5 style={{ marginTop: '0.5em' }}>Diagnoses:</h5>\n      {entry.diagnosisCodes?.map((code: Diagnosis['code'], index: number) => (\n        <div key={index} className='item'>\n          {code}: {findDiagnosisByCode(code, diagnoses)?.name}\n        </div>\n      ))}\n    </Item.Extra>\n  );\n};\n\nconst HospitalEntryDetails: React.FC<{ entry: HospitalEntry }> = ({\n  entry,\n}) => {\n  return (\n    <Item>\n      <Item.Content>\n        <Icon name='hospital' size='big'></Icon>\n        <BaseEntryDetails entry={entry}></BaseEntryDetails>\n        <div>\n          Discharge from {entry.discharge.date} until:{' '}\n          {entry.discharge.criteria}\n        </div>\n        <DiagnosesList entry={entry}></DiagnosesList>\n      </Item.Content>\n    </Item>\n  );\n};\n\nconst OccupationalHealthcareEntryDetails: React.FC<{\n  entry: OccupationalHealthcareEntry;\n}> = ({ entry }) => {\n  return (\n    <Item>\n      <Item.Content>\n        <Icon name='doctor' size='big'></Icon>\n        <BaseEntryDetails entry={entry}></BaseEntryDetails>\n        <div>Employer: {entry.employerName}</div>\n        {entry.sickLeave ? (\n          <div>\n            Sick leave from {entry.sickLeave?.startDate} to{' '}\n            {entry.sickLeave?.endDate}\n          </div>\n        ) : null}\n        <DiagnosesList entry={entry}></DiagnosesList>\n      </Item.Content>\n    </Item>\n  );\n};\n\nconst HealthCheckEntryDetails: React.FC<{\n  entry: HealthCheckEntry;\n}> = ({ entry }) => {\n  return (\n    <Item>\n      <Item.Content>\n        <Icon name='calendar check' size='big'></Icon>\n        <BaseEntryDetails entry={entry}></BaseEntryDetails>\n        <Rating\n          icon='heart'\n          defaultRating={4 - entry.healthCheckRating}\n          maxRating={4}\n          disabled\n        ></Rating>\n        <DiagnosesList entry={entry}></DiagnosesList>\n      </Item.Content>\n    </Item>\n  );\n};\n\nconst EntryDetails: React.FC<{ entry: Entry }> = ({ entry }) => {\n  switch (entry.type) {\n    case 'Hospital':\n      return <HospitalEntryDetails entry={entry}></HospitalEntryDetails>;\n    case 'OccupationalHealthcare':\n      return (\n        <OccupationalHealthcareEntryDetails\n          entry={entry}\n        ></OccupationalHealthcareEntryDetails>\n      );\n    case 'HealthCheck':\n      return <HealthCheckEntryDetails entry={entry}></HealthCheckEntryDetails>;\n    default:\n      return assertNever(entry);\n  }\n};\n\nexport default EntryDetails;\n","import React from 'react';\nimport { useStateValue } from '../state';\nimport { Formik, Form, Field } from 'formik';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { TextField, DiagnosisSelection } from '../AddPatientModal/FormField';\nimport { OccupationalHealthcareEntry } from '../types';\n\nexport type OccupationalHealthcareEntryFormValues = Omit<\n  OccupationalHealthcareEntry,\n  'id'\n>;\n\ninterface Props {\n  onSubmit: (values: OccupationalHealthcareEntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst AddOccupationalHealthcareEntryForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n}) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        type: 'OccupationalHealthcare',\n        description: '',\n        date: '',\n        specialist: '',\n        diagnosisCodes: [],\n        employerName: '',\n        sickLeave: {\n          startDate: '',\n          endDate: '',\n        },\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'This field is required';\n        const dateFormatError = 'Malformatted date';\n        const errors: { [field: string]: string | {} } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!Date.parse(values.date)) {\n          errors.date = dateFormatError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.employerName) {\n          errors.employerName = requiredError;\n        }\n        if (values.sickLeave) {\n          if (!Date.parse(values.sickLeave.startDate)) {\n            errors.sickLeave = {\n              startDate: dateFormatError,\n            };\n          }\n          if (!Date.parse(values.sickLeave.endDate)) {\n            errors.sickLeave = {\n              endDate: dateFormatError,\n            };\n          }\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='Description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='Date'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='Specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Employer name'\n              placeholder='Employer name'\n              name='employerName'\n              component={TextField}\n            />\n            <Field\n              label='Sick leave from'\n              placeholder='Sick leave from'\n              name='sickLeave.startDate'\n              component={TextField}\n            />\n            <Field\n              label='Sick leave to'\n              placeholder='Sick leave to'\n              name='sickLeave.endDate'\n              component={TextField}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            ></DiagnosisSelection>\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddOccupationalHealthcareEntryForm;\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Entry } from '../types';\n\ninterface Props {\n  entryType: Entry['type'];\n  setEntryType: (entryType: Entry['type']) => void;\n}\n\nconst EntryTypeSelector: React.FC<Props> = ({ entryType, setEntryType }) => {\n  return (\n    <div style={{ marginBottom: '1em' }}>\n      <h4>Select entry type</h4>\n      <Button\n        className={entryType === 'HealthCheck' ? 'primary' : ''}\n        onClick={() => setEntryType('HealthCheck')}\n      >\n        Health Check\n      </Button>\n      <Button\n        className={entryType === 'Hospital' ? 'primary' : ''}\n        onClick={() => setEntryType('Hospital')}\n      >\n        Hospital\n      </Button>\n      <Button\n        className={entryType === 'OccupationalHealthcare' ? 'primary' : ''}\n        onClick={() => setEntryType('OccupationalHealthcare')}\n      >\n        Occupational Healthcare\n      </Button>\n    </div>\n  );\n};\n\nexport default EntryTypeSelector;\n","import React from 'react';\nimport { HospitalEntry } from '../types';\nimport { useStateValue } from '../state';\nimport { Formik, Field, Form } from 'formik';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { TextField, DiagnosisSelection } from '../AddPatientModal/FormField';\n\nexport type HospitalEntryFormValues = Omit<HospitalEntry, 'id'>;\n\ninterface Props {\n  onSubmit: (values: HospitalEntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst AddHospitalEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        type: 'Hospital',\n        description: '',\n        date: '',\n        specialist: '',\n        diagnosisCodes: [],\n        discharge: {\n          date: '',\n          criteria: '',\n        },\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'This field is required';\n        const dateFormatError = 'Malformatted date';\n        const errors: { [field: string]: string | {} } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!Date.parse(values.date)) {\n          errors.date = dateFormatError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.discharge.date) {\n          errors.discharge = {\n            date: requiredError,\n          };\n        }\n        if (!Date.parse(values.discharge.date)) {\n          errors.discharge = {\n            date: dateFormatError,\n          };\n        }\n        if (!values.discharge.criteria) {\n          errors.discharge = {\n            criteria: requiredError,\n          };\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='Description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='Date'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='Specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Discharge date'\n              placeholder='Discharge date'\n              name='discharge.date'\n              component={TextField}\n            />\n            <Field\n              label='Discharge criteria'\n              placeholder='Discharge criteria'\n              name='discharge.criteria'\n              component={TextField}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            ></DiagnosisSelection>\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddHospitalEntryForm;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  TextField,\n  DiagnosisSelection,\n  NumberField,\n} from '../AddPatientModal/FormField';\nimport { HealthCheckEntry } from '../types';\nimport { useStateValue } from '../state';\n\nexport type HealthCheckEntryFormValues = Omit<HealthCheckEntry, 'id'>;\n\ninterface Props {\n  onSubmit: (values: HealthCheckEntryFormValues) => void;\n  onCancel: () => void;\n}\n\nexport const AddHealthCheckEntryForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n}) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        type: 'HealthCheck',\n        description: '',\n        date: '',\n        specialist: '',\n        diagnosisCodes: [],\n        healthCheckRating: 0,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'This field is required';\n        const dateFormatError = 'Malformatted date';\n        const errors: { [field: string]: string } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!Date.parse(values.date)) {\n          errors.date = dateFormatError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (values.healthCheckRating < 0 || values.healthCheckRating > 3) {\n          errors.healthCheckRating =\n            'The health check rating must be between 0 and 3';\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='Description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='Date'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='Specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Health check rating'\n              name='healthCheckRating'\n              component={NumberField}\n              min={0}\n              max={3}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            ></DiagnosisSelection>\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddHealthCheckEntryForm;\n","import React, { useState } from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddOccupationalHealthcareEntryForm from './AddOccupationalHealthcareEntryForm';\nimport EntryTypeSelector from './EntryTypeSelector';\nimport { Entry, EntryFormValues } from '../types';\nimport AddHospitalEntryForm from './AddHospitalEntryForm';\nimport AddHealthCheckEntryForm from './AddHealthCheckEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddEntryModal: React.FC<Props> = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n}) => {\n  const [entryType, setEntryType] = useState<Entry['type']>('HealthCheck');\n\n  return (\n    <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n      <Modal.Header>Add new entry</Modal.Header>\n      <Modal.Content>\n        {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n        <EntryTypeSelector\n          entryType={entryType}\n          setEntryType={setEntryType}\n        ></EntryTypeSelector>\n        {entryType === 'HealthCheck' && (\n          <AddHealthCheckEntryForm\n            onSubmit={onSubmit}\n            onCancel={onClose}\n          ></AddHealthCheckEntryForm>\n        )}\n        {entryType === 'Hospital' && (\n          <AddHospitalEntryForm\n            onSubmit={onSubmit}\n            onCancel={onClose}\n          ></AddHospitalEntryForm>\n        )}\n        {entryType === 'OccupationalHealthcare' && (\n          <AddOccupationalHealthcareEntryForm\n            onSubmit={onSubmit}\n            onCancel={onClose}\n          ></AddOccupationalHealthcareEntryForm>\n        )}\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default AddEntryModal;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Icon, Item, Button } from 'semantic-ui-react';\nimport EntryDetails from '../components/EntryDetails';\nimport { Patient, Entry, EntryFormValues } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport { useStateValue } from '../state';\nimport { setCurrentPatient, addEntry } from '../state/reducer';\nimport { useParams } from 'react-router-dom';\nimport AddEntryModal from '../AddEntryModal';\n\nconst PatientDetailsPage: React.FC = () => {\n  const [{ currentPatient }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n  };\n\n  const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n      const patientId = currentPatient?.id;\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${patientId}/entries`,\n        values\n      );\n      closeModal();\n      dispatch(addEntry(newEntry));\n    } catch (e) {\n      console.error(e.response.data);\n    }\n  };\n\n  const { id } = useParams<{ id: string }>();\n\n  React.useEffect(() => {\n    const fetchCurrentPatient = async () => {\n      try {\n        const { data: currentPatientFromApi } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(setCurrentPatient(currentPatientFromApi));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    if (!(currentPatient?.id === id)) {\n      console.log(`Fetching patient with id ${id} from api`);\n      fetchCurrentPatient();\n    }\n  }, [dispatch, currentPatient, id]);\n\n  if (currentPatient === null) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className='App'>\n      <Container>\n        <h3>\n          {currentPatient.name}\n          <Icon\n            className={currentPatient.gender === 'male' ? 'mars' : 'venus'}\n          ></Icon>\n        </h3>\n        <div>Social Security Number: {currentPatient.ssn}</div>\n        <div>Date of birth: {currentPatient.dateOfBirth}</div>\n        <div>Occupation: {currentPatient.occupation}</div>\n        {currentPatient.entries.length > 0 && (\n          <>\n            <h4>Entries</h4>\n            <Item.Group divided>\n              {currentPatient.entries.map((entry: Entry) => {\n                return (\n                  <EntryDetails key={entry.id} entry={entry}></EntryDetails>\n                );\n              })}\n            </Item.Group>\n          </>\n        )}\n        <AddEntryModal\n          modalOpen={modalOpen}\n          onSubmit={submitNewEntry}\n          error={''}\n          onClose={closeModal}\n        />\n        <Button onClick={() => openModal()}>Add new entry</Button>\n      </Container>\n    </div>\n  );\n};\n\nexport default PatientDetailsPage;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { useStateValue } from './state';\nimport { Patient, Diagnosis } from './types';\nimport { setPatientList, setDiagnoses } from './state/reducer';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetailsPage from './PatientDetailsPage';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n    const fetchDiagnoses = async () => {\n      try {\n        const { data: diagnosesFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnoses(diagnosesFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchDiagnoses();\n  }, [dispatch]);\n\n  return (\n    <div className='App'>\n      <Router>\n        <Container>\n          <Header as='h1'>Patientor</Header>\n          <Button as={Link} to='/' primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path='/patients/:id' render={() => <PatientDetailsPage />} />\n            <Route path='/' render={() => <PatientListPage />} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}